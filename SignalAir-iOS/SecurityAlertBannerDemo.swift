#!/usr/bin/env swift

import SwiftUI

// MARK: - Security Alert Banner Demo
// ÂÆâÂÖ®Ë≠¶ÂëäÊ©´ÂπÖÊºîÁ§∫Á®ãÂºè

struct SecurityAlertBannerDemo: View {
    @StateObject private var bannerSystem = SecurityAlertBannerSystem.shared
    @State private var selectedAttackType: SecurityAlertType = .trustAnomaly
    @State private var deviceName = "iPhone-Áî®Êà∂A"
    private let languageService = LanguageService.shared
    
    var body: some View {
        ZStack {
            // ËÉåÊôØ
            Color(.systemGroupedBackground)
                .ignoresSafeArea()
            
            VStack(spacing: 20) {
                // Ê®ôÈ°å
                Text("üõ°Ô∏è ÂÆâÂÖ®Ë≠¶ÂëäÊ©´ÂπÖÊºîÁ§∫")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .padding(.top, 20)
                
                // Ë™™Êòé
                Text("Ê≠§ÊºîÁ§∫Â±ïÁ§∫‰∏çÂêåÈ°ûÂûãÁöÑÂÆâÂÖ®Â®ÅËÑÖË≠¶ÂëäÊ©´ÂπÖ")
                    .font(.body)
                    .foregroundColor(.secondary)
                    .multilineTextAlignment(.center)
                    .padding(.horizontal)
                
                // ÊéßÂà∂ÂçÄÂüü
                VStack(spacing: 16) {
                    // ÊîªÊìäÈ°ûÂûãÈÅ∏Êìá
                    VStack(alignment: .leading, spacing: 8) {
                        Text("ÈÅ∏ÊìáÊîªÊìäÈ°ûÂûã")
                            .font(.headline)
                        
                        Picker("ÊîªÊìäÈ°ûÂûã", selection: $selectedAttackType) {
                            Text("‰ø°‰ªªÊø´Áî®").tag(SecurityAlertType.trustAnomaly)
                            Text("ÁØÄÈªûÁï∞Â∏∏").tag(SecurityAlertType.nodeAnomaly)
                            Text("È´òÁ¥öÂ®ÅËÑÖ").tag(SecurityAlertType.aptThreat)
                            Text("DDoSÊîªÊìä").tag(SecurityAlertType.connectionLimit)
                            Text("Êï∏ÊìöÂ§ñÊ¥©").tag(SecurityAlertType.dataExfiltration)
                            Text("Ë™çË≠âÂ§±Êïó").tag(SecurityAlertType.authenticationFailure)
                            Text("Á≥ªÁµ±ÂÖ•‰æµ").tag(SecurityAlertType.systemCompromise)
                            Text("ÊÉ°ÊÑèËªüÈ´î").tag(SecurityAlertType.malwareDetection)
                        }
                        .pickerStyle(MenuPickerStyle())
                        .frame(maxWidth: .infinity)
                    }
                    
                    // Ë®≠ÂÇôÂêçÁ®±Ëº∏ÂÖ•
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Ë®≠ÂÇôÂêçÁ®±")
                            .font(.headline)
                        
                        TextField("Ëº∏ÂÖ•Ë®≠ÂÇôÂêçÁ®±", text: $deviceName)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                    }
                    
                    // Ëß∏ÁôºÊåâÈàï
                    Button(action: {
                        triggerSecurityAlert()
                    }) {
                        Text("Ëß∏ÁôºÂÆâÂÖ®Ë≠¶Âëä")
                            .font(.headline)
                            .foregroundColor(.white)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.red)
                            .cornerRadius(10)
                    }
                }
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(12)
                .shadow(radius: 2)
                
                // ÊîªÊìäÈ°ûÂûãË™™Êòé
                attackTypeDescriptionView
                
                // ‰ΩáÂàóÁãÄÊÖã
                queueStatusView
                
                Spacer()
            }
            .padding()
            
            // ÂÆâÂÖ®Ë≠¶ÂëäÊ©´ÂπÖ
            SecurityAlertBannerView()
        }
    }
    
    // ÊîªÊìäÈ°ûÂûãË™™ÊòéË¶ñÂúñ
    private var attackTypeDescriptionView: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("ÊîªÊìäÈ°ûÂûãË™™Êòé")
                .font(.headline)
            
            Text(getAttackTypeDescription(selectedAttackType))
                .font(.body)
                .foregroundColor(.secondary)
                .padding()
                .background(Color(.systemBackground))
                .cornerRadius(8)
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    // ‰ΩáÂàóÁãÄÊÖãË¶ñÂúñ
    private var queueStatusView: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("Ë≠¶Âëä‰ΩáÂàóÁãÄÊÖã")
                .font(.headline)
            
            HStack {
                Text("Áï∂ÂâçË≠¶Âëä:")
                    .fontWeight(.medium)
                Text(bannerSystem.currentAlert?.title ?? "ÁÑ°")
                    .foregroundColor(.secondary)
                Spacer()
            }
            
            HStack {
                Text("‰ΩáÂàó‰∏≠:")
                    .fontWeight(.medium)
                Text("\(bannerSystem.alertQueue.count) ÂÄã")
                    .foregroundColor(.secondary)
                Spacer()
            }
            
            HStack {
                Text("ÁãÄÊÖã:")
                    .fontWeight(.medium)
                Text(bannerSystem.isShowingAlert ? "È°ØÁ§∫‰∏≠" : "Á©∫Èñí")
                    .foregroundColor(bannerSystem.isShowingAlert ? .green : .gray)
                Spacer()
            }
        }
        .padding()
        .background(Color(.systemBackground))
        .cornerRadius(12)
        .shadow(radius: 2)
    }
    
    // Ëß∏ÁôºÂÆâÂÖ®Ë≠¶Âëä
    private func triggerSecurityAlert() {
        bannerSystem.showSecurityAlert(for: selectedAttackType, deviceName: deviceName)
    }
    
    // Áç≤ÂèñÊîªÊìäÈ°ûÂûãË™™Êòé
    private func getAttackTypeDescription(_ attackType: SecurityAlertType) -> String {
        switch attackType {
        case .trustAnomaly:
            return "‰ø°‰ªªÊø´Áî®ÊîªÊìäÔºöË®≠ÂÇôÁôºÈÄÅ‰∏çÂÆâÂÖ®ÁöÑË®äÊÅØÔºåÂèØËÉΩÂΩ±ÈüøÈÄöË®äÂÆâÂÖ®„ÄÇÁî®Êà∂ÈúÄË¶ÅÂÅúÊ≠¢ËàáË©≤Ë®≠ÂÇôÈÄöË®ä„ÄÇ"
        case .nodeAnomaly:
            return "ÁØÄÈªûÁï∞Â∏∏ÔºöË®≠ÂÇôÂá∫ÁèæÁï∞Â∏∏Ë°åÁÇ∫ÔºåÂèØËÉΩÂΩ±ÈüøÁ∂≤Ë∑ØÁ©©ÂÆö„ÄÇÁî®Êà∂ÈúÄË¶ÅÊ™¢Êü•Ë®≠ÂÇôÁãÄÊÖã„ÄÇ"
        case .aptThreat:
            return "È´òÁ¥öÂ®ÅËÑÖÔºöË®≠ÂÇôË©¶ÂúñÊé¢Ê∏¨Á∂≤Ë∑ØÔºåÂèØËÉΩÊòØÈ´òÁ¥öÊîªÊìä„ÄÇÁî®Êà∂ÈúÄË¶ÅÁ´ãÂç≥Êñ∑ÈñãÈÄ£Á∑ö„ÄÇ"
        case .connectionLimit:
            return "DDoSÊîªÊìäÔºöÂ§ßÈáèË®äÊÅØË©¶ÂúñÂπ≤ÊìæÈÄöË®äÁ∂≤Ë∑Ø„ÄÇÁ≥ªÁµ±ÊúÉËá™ÂãïËôïÁêÜÔºåÁî®Êà∂‰øùÊåÅÈÄ£Á∑öÂç≥ÂèØ„ÄÇ"
        case .dataExfiltration:
            return "Êï∏ÊìöÂ§ñÊ¥©ÔºöË®≠ÂÇôË©¶ÂúñÂÇ≥ÈÄÅÊïèÊÑüÊï∏ÊìöÔºåÂèØËÉΩÂç±ÂÆ≥Ë≥áË®äÂÆâÂÖ®„ÄÇÁî®Êà∂ÈúÄË¶ÅÊñ∑ÈñãÈÄ£Á∑ö„ÄÇ"
        case .authenticationFailure:
            return "Ë™çË≠âÂ§±ÊïóÔºöË®≠ÂÇôÁÑ°Ê≥ïÈÄöÈÅéÂÆâÂÖ®Ë™çË≠âÔºåÂèØËÉΩÂ≠òÂú®È¢®Èö™„ÄÇÁî®Êà∂ÈúÄË¶ÅÈáçÊñ∞Ë™çË≠â„ÄÇ"
        case .systemCompromise:
            return "Á≥ªÁµ±ÂÖ•‰æµÔºöË®≠ÂÇôÁôºËµ∑Â§öÁ®ÆÂèØÁñëÊ¥ªÂãïÔºåÂèØËÉΩÊòØÊ∑∑ÂêàÊîªÊìä„ÄÇÁî®Êà∂ÈúÄË¶ÅÁ´ãÂç≥Êñ∑Èñã‰∏¶ÈáçÂïüÊáâÁî®„ÄÇ"
        case .malwareDetection:
            return "ÊÉ°ÊÑèËªüÈ´îÔºöË®≠ÂÇôÂèØËÉΩÈÅãË°åÊÉ°ÊÑèËªüÈ´îÔºåÂ®ÅËÑÖÁ∂≤Ë∑ØÂÆâÂÖ®„ÄÇÁî®Êà∂ÈúÄË¶ÅÁ´ãÂç≥Êñ∑Èñã‰∏¶ÊéÉÊèèË®≠ÂÇô„ÄÇ"
        }
    }
}

// MARK: - È†êË¶Ω
struct SecurityAlertBannerDemo_Previews: PreviewProvider {
    static var previews: some View {
        SecurityAlertBannerDemo()
    }
}

// MARK: - ÊºîÁ§∫Áî®ÁöÑ SecurityAlertType
enum SecurityAlertType: CaseIterable {
    case trustAnomaly
    case nodeAnomaly
    case aptThreat
    case connectionLimit
    case dataExfiltration
    case authenticationFailure
    case systemCompromise
    case malwareDetection
}

// MARK: - Ê®°Êì¨ÁöÑ SecurityAlertBannerSystem
class SecurityAlertBannerSystem: ObservableObject {
    static let shared = SecurityAlertBannerSystem()
    
    @Published var currentAlert: SecurityBannerAlert?
    @Published var alertQueue: [SecurityBannerAlert] = []
    @Published var isShowingAlert = false
    
    private var alertTimer: Timer?
    private let alertDisplayDuration: TimeInterval = 8.0
    private let languageService = LanguageService.shared
    
    deinit {
        alertTimer?.invalidate()
        alertTimer = nil
        print("üßπ SecurityAlertBannerSystem: deinit ÂÆåÊàêÔºåTimerÂ∑≤Ê∏ÖÁêÜ")
    }
    
    func showSecurityAlert(for attackType: SecurityAlertType, deviceName: String) {
        let alert = createMockAlert(for: attackType, deviceName: deviceName)
        
        DispatchQueue.main.async { [weak self] in
            self?.queueAlert(alert)
        }
    }
    
    func dismissCurrentAlert() {
        DispatchQueue.main.async { [weak self] in
            self?.isShowingAlert = false
            self?.currentAlert = nil
            self?.processNextAlert()
        }
    }
    
    private func createMockAlert(for attackType: SecurityAlertType, deviceName: String) -> SecurityBannerAlert {
        let config = getMockAlertConfig(for: attackType)
        
        return SecurityBannerAlert(
            id: UUID(),
            attackType: attackType,
            title: config.title,
            body: config.body.replacingOccurrences(of: "%device%", with: deviceName),
            action: config.action,
            severity: config.severity,
            iconName: config.iconName,
            primaryColor: config.primaryColor,
            backgroundColor: config.backgroundColor,
            timestamp: Date(),
            deviceName: deviceName
        )
    }
    
    private func getMockAlertConfig(for attackType: SecurityAlertType) -> AlertConfiguration {
        switch attackType {
        case .trustAnomaly:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_trust_anomaly_title") + "ÔºÅ",
                body: languageService.t("security_trust_anomaly_content"),
                action: languageService.t("security_trust_anomaly_action"),
                severity: .high,
                iconName: "exclamationmark.triangle.fill",
                primaryColor: Color.orange,
                backgroundColor: Color.orange.opacity(0.1)
            )
        case .nodeAnomaly:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_node_anomaly_title") + "ÔºÅ",
                body: languageService.t("security_node_anomaly_content"),
                action: languageService.t("security_node_anomaly_action"),
                severity: .medium,
                iconName: "wifi.exclamationmark",
                primaryColor: Color.yellow,
                backgroundColor: Color.yellow.opacity(0.1)
            )
        case .aptThreat:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_apt_threat_title") + "ÔºÅ",
                body: languageService.t("security_apt_threat_content"),
                action: languageService.t("security_apt_threat_action"),
                severity: .critical,
                iconName: "shield.slash.fill",
                primaryColor: Color.red,
                backgroundColor: Color.red.opacity(0.1)
            )
        case .connectionLimit:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_connection_limit_title") + "ÔºÅ",
                body: languageService.t("security_connection_limit_content"),
                action: languageService.t("security_connection_limit_action"),
                severity: .high,
                iconName: "network.badge.shield.half.filled",
                primaryColor: Color.blue,
                backgroundColor: Color.blue.opacity(0.1)
            )
        case .dataExfiltration:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_data_exfiltration_title") + "ÔºÅ",
                body: languageService.t("security_data_exfiltration_content"),
                action: languageService.t("security_data_exfiltration_action"),
                severity: .critical,
                iconName: "lock.slash.fill",
                primaryColor: Color.red,
                backgroundColor: Color.red.opacity(0.1)
            )
        case .authenticationFailure:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_authentication_failure_title") + "ÔºÅ",
                body: languageService.t("security_authentication_failure_content"),
                action: languageService.t("security_authentication_failure_action"),
                severity: .medium,
                iconName: "person.badge.minus.fill",
                primaryColor: Color.orange,
                backgroundColor: Color.orange.opacity(0.1)
            )
        case .systemCompromise:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_system_compromise_title") + "ÔºÅ",
                body: languageService.t("security_system_compromise_content"),
                action: languageService.t("security_system_compromise_action"),
                severity: .critical,
                iconName: "exclamationmark.octagon.fill",
                primaryColor: Color.red,
                backgroundColor: Color.red.opacity(0.1)
            )
        case .malwareDetection:
            return AlertConfiguration(
                title: "üö® " + languageService.t("security_malware_detection_title") + "ÔºÅ",
                body: languageService.t("security_malware_detection_content"),
                action: languageService.t("security_malware_detection_action"),
                severity: .critical,
                iconName: "ant.fill",
                primaryColor: Color.red,
                backgroundColor: Color.red.opacity(0.1)
            )
        }
    }
    
    private func queueAlert(_ alert: SecurityBannerAlert) {
        if alertQueue.count >= 5 {
            alertQueue.removeFirst()
        }
        
        alertQueue.append(alert)
        
        if !isShowingAlert {
            processNextAlert()
        }
    }
    
    private func processNextAlert() {
        guard !alertQueue.isEmpty else { return }
        
        let nextAlert = alertQueue.removeFirst()
        currentAlert = nextAlert
        isShowingAlert = true
        
        alertTimer?.invalidate()
        alertTimer = Timer.scheduledTimer(withTimeInterval: alertDisplayDuration, repeats: false) { [weak self] _ in
            self?.dismissCurrentAlert()
        }
    }
}

// MARK: - Ê®°Êì¨ÁöÑ SecurityBannerAlert
struct SecurityBannerAlert: Identifiable {
    let id: UUID
    let attackType: SecurityAlertType
    let title: String
    let body: String
    let action: String
    let severity: AlertSeverity
    let iconName: String
    let primaryColor: Color
    let backgroundColor: Color
    let timestamp: Date
    let deviceName: String
}

struct AlertConfiguration {
    let title: String
    let body: String
    let action: String
    let severity: AlertSeverity
    let iconName: String
    let primaryColor: Color
    let backgroundColor: Color
}

enum AlertSeverity {
    case low, medium, high, critical
}

// MARK: - Ê®°Êì¨ÁöÑ SecurityAlertBannerView
struct SecurityAlertBannerView: View {
    @ObservedObject var bannerSystem = SecurityAlertBannerSystem.shared
    
    var body: some View {
        VStack {
            if bannerSystem.isShowingAlert, let alert = bannerSystem.currentAlert {
                SecurityBannerCard(alert: alert)
                    .transition(.asymmetric(
                        insertion: .move(edge: .top).combined(with: .opacity),
                        removal: .move(edge: .top).combined(with: .opacity)
                    ))
                    .animation(.easeInOut(duration: 0.3), value: bannerSystem.isShowingAlert)
            }
            
            Spacer()
        }
        .zIndex(1000)
    }
}

struct SecurityBannerCard: View {
    let alert: SecurityBannerAlert
    @ObservedObject private var bannerSystem = SecurityAlertBannerSystem.shared
    private let languageService = LanguageService.shared
    
    var body: some View {
        VStack(spacing: 0) {
            HStack(spacing: 12) {
                Image(systemName: alert.iconName)
                    .font(.title2)
                    .foregroundColor(alert.primaryColor)
                    .frame(width: 24, height: 24)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(alert.title)
                        .font(.headline)
                        .foregroundColor(.primary)
                    
                    Text(alert.body)
                        .font(.body)
                        .foregroundColor(.secondary)
                        .fixedSize(horizontal: false, vertical: true)
                    
                    Text(alert.action)
                        .font(.caption)
                        .foregroundColor(alert.primaryColor)
                        .fontWeight(.medium)
                }
                
                Spacer()
                
                Button(action: {
                    bannerSystem.dismissCurrentAlert()
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .font(.title3)
                        .foregroundColor(.gray)
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 12)
            
            HStack(spacing: 8) {
                Button(action: {
                    print("Áî®Êà∂ÈÅ∏ÊìáÁ´ãÂç≥ËôïÁêÜ")
                    bannerSystem.dismissCurrentAlert()
                }) {
                    Text(languageService.t("security_action_now"))
                        .font(.footnote)
                        .fontWeight(.medium)
                        .foregroundColor(.white)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 8)
                        .background(alert.primaryColor)
                        .cornerRadius(8)
                }
                
                Button(action: {
                    print("Áî®Êà∂ÈÅ∏ÊìáÁ®çÂæåËôïÁêÜ")
                    bannerSystem.dismissCurrentAlert()
                }) {
                    Text(languageService.t("security_action_later"))
                        .font(.footnote)
                        .foregroundColor(alert.primaryColor)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 8)
                        .background(alert.primaryColor.opacity(0.1))
                        .cornerRadius(8)
                }
                
                Spacer()
            }
            .padding(.horizontal, 16)
            .padding(.bottom, 12)
        }
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(alert.backgroundColor)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(alert.primaryColor.opacity(0.3), lineWidth: 1)
                )
        )
        .padding(.horizontal, 16)
        .padding(.top, 8)
        .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
    }
}

// MARK: - ‰ΩøÁî®Ë™™Êòé
/*
 üõ°Ô∏è ÂÆâÂÖ®Ë≠¶ÂëäÊ©´ÂπÖÊºîÁ§∫Á®ãÂºè
 Ê≠§Á®ãÂºèÂ±ïÁ§∫‰∫Ü SignalAir ÁöÑÂÆâÂÖ®Ë≠¶ÂëäÊ©´ÂπÖÁ≥ªÁµ±
 ÂåÖÂê´8Á®Æ‰∏çÂêåÁöÑÊîªÊìäÈ°ûÂûãË≠¶Âëä
 ÊØèÁ®ÆË≠¶ÂëäÈÉΩÊúâÁî®Êà∂ÂèãÂñÑÁöÑË™™ÊòéÂíåÂª∫Ë≠∞Ë°åÂãï
 
 ‰ΩøÁî®ÊñπÊ≥ïÔºö
 1. Âú® Xcode ‰∏≠ÊâìÈñãÊ≠§È†ÖÁõÆ
 2. ÈÅãË°å SecurityAlertBannerDemo
 3. ÈÅ∏Êìá‰∏çÂêåÁöÑÊîªÊìäÈ°ûÂûã
 4. ÈªûÊìäËß∏ÁôºÊåâÈàïÊü•ÁúãË≠¶ÂëäÊïàÊûú
 
 ÁâπËâ≤ÂäüËÉΩÔºö
 ‚Ä¢ 8Á®ÆÂÆâÂÖ®Â®ÅËÑÖÈ°ûÂûã
 ‚Ä¢ Áî®Êà∂ÂèãÂñÑÁöÑË≠¶ÂëäË®äÊÅØ
 ‚Ä¢ Ê∏ÖÊô∞ÁöÑË°åÂãïÂª∫Ë≠∞
 ‚Ä¢ Ëá™ÂãïÊ∂àÂ§±Ë®àÊôÇÂô®
 ‚Ä¢ Ë≠¶Âëä‰ΩáÂàóÁÆ°ÁêÜ
 ‚Ä¢ ÁæéËßÄÁöÑ UI Ë®≠Ë®à
 */