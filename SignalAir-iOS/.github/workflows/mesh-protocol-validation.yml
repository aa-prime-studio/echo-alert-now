name: Mesh Protocol Validation & DevSecOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  XCODE_VERSION: "15.2"
  IOS_SIMULATOR: "iPhone 15"
  
jobs:
  # ‚úÖ 1. Ë®äÊÅØÊ†ºÂºèË®≠Ë®àËàáÈ©óË≠â
  schema-validation:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Validate Protocol Schema
      run: |
        echo "üîç Validating Binary Protocol Schema"
        # Ê™¢Êü• schema ‰∏ÄËá¥ÊÄß
        swift test --filter ProtocolSchemaTests
        
    - name: Schema Compatibility Check
      run: |
        echo "üîÑ Checking Schema Backward Compatibility"
        # Ëàá‰∏ä‰∏ÄÁâàÊú¨ÊØîËºÉ schema ËÆäÊõ¥
        if [ -f "PROTOCOL_SCHEMA_BASELINE.md" ]; then
          diff PROTOCOL_SCHEMA.md PROTOCOL_SCHEMA_BASELINE.md || echo "‚ö†Ô∏è Schema changes detected"
        fi

  # ‚úÖ 2. Á∑®Ëß£Á¢º‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶Ôºàround-tripÔºâ
  round-trip-tests:
    runs-on: macos-latest
    needs: schema-validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Round-Trip Encoding Tests
      run: |
        echo "üîÑ Running Round-Trip Encoding Tests"
        xcodebuild test \
          -scheme SignalAir \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          -testPlan RoundTripTests \
          -resultBundlePath TestResults/RoundTrip.xcresult
    
    - name: Upload Round-Trip Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: round-trip-results
        path: TestResults/RoundTrip.xcresult

  # ‚úÖ 3. Ë≥áÊñôÁµêÊßãÂêëÂâç/ÂêëÂæåÁõ∏ÂÆπÊÄß‰øùË≠â
  compatibility-matrix:
    runs-on: macos-latest
    strategy:
      matrix:
        protocol_version: [1, 2]  # Ê∏¨Ë©¶‰∏çÂêåÂçîË≠∞ÁâàÊú¨
        message_type: [chat, signal, system, heartbeat]
    steps:
    - uses: actions/checkout@v4
    
    - name: Compatibility Test - Protocol v${{ matrix.protocol_version }} - ${{ matrix.message_type }}
      run: |
        echo "üîÑ Testing Protocol v${{ matrix.protocol_version }} - ${{ matrix.message_type }}"
        swift test --filter "Compatibility.*v${{ matrix.protocol_version }}.*${{ matrix.message_type }}"

  # ‚úÖ 4. Ê®°Á≥äÊ∏¨Ë©¶„ÄÅÈùúÊÖãÊ™¢Êü•„ÄÅË®òÊÜ∂È´î‰øùË≠∑
  security-fuzz-tests:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode with Sanitizers
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Static Analysis with SwiftLint
      run: |
        echo "üìä Running Static Analysis"
        if which swiftlint >/dev/null; then
          swiftlint --reporter github-actions-logging
        else
          echo "‚ö†Ô∏è SwiftLint not installed"
        fi
    
    - name: Memory Safety Tests (ASan + UBSan)
      run: |
        echo "üõ°Ô∏è Running Memory Safety Tests"
        xcodebuild test \
          -scheme SignalAir \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          -enableAddressSanitizer YES \
          -enableUndefinedBehaviorSanitizer YES \
          -testPlan SecurityTests
    
    - name: Fuzz Testing (Binary Protocol)
      run: |
        echo "üéØ Running Fuzz Tests on Binary Protocol"
        # ÁîüÊàêÈö®Ê©ü‰∫åÈÄ≤Âà∂Êï∏ÊìöÊ∏¨Ë©¶Ëß£Á¢ºÂô®
        swift test --filter FuzzTests
        
    - name: Thread Safety Analysis
      run: |
        echo "üîí Running Thread Safety Analysis"
        xcodebuild test \
          -scheme SignalAir \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          -enableThreadSanitizer YES \
          -testPlan ThreadSafetyTests

  # ‚úÖ 5. Ë∑®ÁØÄÈªû‰∫íÈÄöÊ∏¨Ë©¶ÔºàMesh Á´ØÈªû matrixÔºâ
  mesh-interop-tests:
    runs-on: macos-latest
    strategy:
      matrix:
        node_config:
          - { sender: "iOS_v1", receiver: "iOS_v1" }
          - { sender: "iOS_v1", receiver: "iOS_v2" }  
          - { sender: "CLI_v1", receiver: "iOS_v1" }
    steps:
    - uses: actions/checkout@v4
    
    - name: Mesh Interoperability Test - ${{ matrix.node_config.sender }} ‚Üí ${{ matrix.node_config.receiver }}
      run: |
        echo "üåê Testing ${{ matrix.node_config.sender }} ‚Üí ${{ matrix.node_config.receiver }}"
        # ÂïüÂãïÊ®°Êì¨ÁØÄÈªû‰∏¶Ê∏¨Ë©¶‰∫íÈÄöÊÄß
        swift run MeshInteropTester \
          --sender ${{ matrix.node_config.sender }} \
          --receiver ${{ matrix.node_config.receiver }} \
          --test-duration 60s
    
    - name: Network Partition Simulation
      run: |
        echo "üì° Testing Network Partition Recovery"
        swift test --filter MeshPartitionTests

  # ‚úÖ 6. iOS ÂØ¶ÈöõËºâÂÖ•Ëß£Êûê + ÈåØË™§Áõ£Êéß
  ios-integration-tests:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup iOS Simulator
      run: |
        xcrun simctl boot "${{ env.IOS_SIMULATOR }}" || true
        sleep 10
    
    - name: Real Device Protocol Tests
      run: |
        echo "üì± Running Real Device Protocol Tests"
        xcodebuild test \
          -scheme SignalAir \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          -testPlan IntegrationTests \
          -resultBundlePath TestResults/Integration.xcresult
    
    - name: Error Monitoring Validation
      run: |
        echo "üìä Validating Error Monitoring"
        # È©óË≠âÈåØË™§Áõ£ÊéßÂíå‰∏äÂ†±Ê©üÂà∂
        swift test --filter ErrorMonitoringTests
    
    - name: Performance Benchmarks
      run: |
        echo "‚ö° Running Performance Benchmarks"
        xcodebuild test \
          -scheme SignalAir \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }}" \
          -testPlan PerformanceTests \
          -resultBundlePath TestResults/Performance.xcresult

  # üìä ÁµêÊûúÂåØÁ∏ΩÂíåÂ†±Âëä
  test-summary:
    runs-on: macos-latest
    needs: [schema-validation, round-trip-tests, compatibility-matrix, security-fuzz-tests, mesh-interop-tests, ios-integration-tests]
    if: always()
    steps:
    - name: Download All Test Results
      uses: actions/download-artifact@v4
      with:
        path: AllResults/
    
    - name: Generate Test Report
      run: |
        echo "üìã Generating Comprehensive Test Report"
        cat > test-summary.md << 'EOF'
        # üöÄ SignalAir Mesh Protocol Validation Report
        
        ## üìä Test Results Summary
        
        | Test Suite | Status | Coverage |
        |------------|---------|----------|
        | Schema Validation | ${{ needs.schema-validation.result }} | ‚úÖ |
        | Round-Trip Tests | ${{ needs.round-trip-tests.result }} | ‚úÖ |
        | Compatibility Matrix | ${{ needs.compatibility-matrix.result }} | ‚úÖ |
        | Security & Fuzz | ${{ needs.security-fuzz-tests.result }} | üõ°Ô∏è |
        | Mesh Interop | ${{ needs.mesh-interop-tests.result }} | üåê |
        | iOS Integration | ${{ needs.ios-integration-tests.result }} | üì± |
        
        ## üéØ DevSecOps Compliance
        
        - ‚úÖ Ë®äÊÅØÊ†ºÂºèË®≠Ë®àËàáÈ©óË≠â
        - ‚úÖ Á∑®Ëß£Á¢º‰∏ÄËá¥ÊÄßÊ∏¨Ë©¶
        - ‚úÖ ÂêëÂâç/ÂêëÂæåÁõ∏ÂÆπÊÄß‰øùË≠â  
        - ‚úÖ Ê®°Á≥äÊ∏¨Ë©¶ËàáÂÆâÂÖ®Ê™¢Êü•
        - ‚úÖ Ë∑®ÁØÄÈªû‰∫íÈÄöÈ©óË≠â
        - ‚úÖ ÂØ¶Ê©üËß£ÊûêËàáÈåØË™§Áõ£Êéß
        
        Generated: $(date)
        EOF
    
    - name: Upload Final Report
      uses: actions/upload-artifact@v4
      with:
        name: mesh-protocol-validation-report
        path: test-summary.md

  # üö® ÂÆâÂÖ®ÊéÉÊèè
  security-scan:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Dependency Security Scan
      run: |
        echo "üîç Scanning Dependencies for Vulnerabilities"
        # ÊéÉÊèè Swift Package Manager ‰æùË≥¥
        swift package audit || true
    
    - name: Code Security Analysis
      run: |
        echo "üõ°Ô∏è Running Security Code Analysis"
        # ‰ΩøÁî® Semgrep ÊàñÈ°û‰ººÂ∑•ÂÖ∑ÊéÉÊèè‰ª£Á¢º
        if which semgrep >/dev/null; then
          semgrep --config=auto .
        else
          echo "‚ö†Ô∏è Security scanner not available"
        fi