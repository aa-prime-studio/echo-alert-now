import Foundation
import MultipeerConnectivity
import Network
import os.log

// MARK: - ÂÅ•Â£ØÁ∂≤Ë∑ØÂ±§ - ÈÇäÁïåÊÉÖÊ≥ÅÂ∞àÁî®ËôïÁêÜ
// Â∞àÁÇ∫ËôïÁêÜË§áÈõúÁöÑÈÇäÁïåÊÉÖÊ≥ÅÂíåÁ∂≤Ë∑ØÁï∞Â∏∏Ë®≠Ë®à

/// Á∂≤Ë∑ØÊìç‰ΩúÁµêÊûú
enum NetworkOperationResult {
    case success(Data?)
    case failure(NetworkError)
    case partialSuccess(Data?, [String: Error])
    case timeout
    case cancelled
}

/// ÈÇäÁïåÊÉÖÊ≥ÅÈ°ûÂûã
enum EdgeCaseType: String, CaseIterable {
    case simultaneousConnection = "simultaneous_connection"
    case rapidDisconnection = "rapid_disconnection"
    case backgroundTransition = "background_transition"
    case memoryPressure = "memory_pressure"
    case channelContention = "channel_contention"
    case networkInstability = "network_instability"
    case concurrentOperations = "concurrent_operations"
    case resourceExhaustion = "resource_exhaustion"
}

/// ÈÇäÁïåÊÉÖÊ≥ÅËôïÁêÜÂô®
protocol EdgeCaseHandler {
    func canHandle(_ edgeCase: EdgeCaseType) -> Bool
    func handle(_ context: EdgeCaseContext) async -> EdgeCaseResult
    var priority: Int { get }
}

/// ÈÇäÁïåÊÉÖÊ≥Å‰∏ä‰∏ãÊñá
struct EdgeCaseContext {
    let type: EdgeCaseType
    let peerID: MCPeerID?
    let operation: String
    let attemptCount: Int
    let errorHistory: [Error]
    let systemState: [String: Any]
    let timestamp: Date
}

/// ÈÇäÁïåÊÉÖÊ≥ÅËôïÁêÜÁµêÊûú
struct EdgeCaseResult {
    let success: Bool
    let recoveryAction: RecoveryAction?
    let delay: TimeInterval?
    let message: String
}

/// ÊÅ¢Âæ©Âãï‰Ωú
enum RecoveryAction {
    case retry
    case fallback
    case isolate
    case restart
    case none
}

/// ÂÅ•Â£ØÁ∂≤Ë∑ØÂ±§‰∏ªÈ°û
@MainActor
class RobustNetworkLayer: ObservableObject {
    
    // MARK: - ‰æùË≥¥Ê≥®ÂÖ•
    private let networkService: NetworkServiceProtocol
    private let channelPoolManager: AdvancedChannelPoolManager
    
    // MARK: - ÈÇäÁïåÊÉÖÊ≥ÅËôïÁêÜ
    private var edgeCaseHandlers: [EdgeCaseHandler] = []
    private let edgeCaseDetector = EdgeCaseDetector()
    private let circuitBreaker = CircuitBreaker()
    
    // MARK: - ÁãÄÊÖãÁÆ°ÁêÜ
    @Published private(set) var networkHealth: NetworkHealth = .unknown
    @Published private(set) var edgeCaseStats: [EdgeCaseType: Int] = [:]
    @Published private(set) var activeRecoveries: [String: RecoveryOperation] = [:]
    
    // MARK: - ‰ΩµÁôºÊéßÂà∂
    private let operationQueue = OperationQueue()
    private let edgeCaseQueue = DispatchQueue(label: "com.signalair.edgecase", qos: .userInitiated)
    private let stateLock = NSLock()
    
    // MARK: - Áõ£Êéß
    private let logger = Logger(subsystem: "com.signalair", category: "RobustNetwork")
    private let metricsCollector = NetworkMetricsCollector()
    
    // MARK: - ÈÖçÁΩÆ
    private struct Configuration {
        static let maxConcurrentOperations = 15
        static let operationTimeout: TimeInterval = 30.0
        static let circuitBreakerThreshold = 5
        static let recoveryTimeout: TimeInterval = 60.0
    }
    
    init(networkService: NetworkServiceProtocol, channelPoolManager: AdvancedChannelPoolManager) {
        self.networkService = networkService
        self.channelPoolManager = channelPoolManager
        
        setupOperationQueue()
        registerEdgeCaseHandlers()
        startMonitoring()
        
        logger.info("üõ°Ô∏è RobustNetworkLayer initialized")
    }
    
    // MARK: - ÂÖ¨ÂÖ±API
    
    /// ÂÅ•Â£ØÁöÑÁôºÈÄÅÊìç‰Ωú - Ëá™ÂãïËôïÁêÜÊâÄÊúâÈÇäÁïåÊÉÖÊ≥Å
    func robustSend(_ data: Data, to peers: [MCPeerID], timeout: TimeInterval = Configuration.operationTimeout) async -> NetworkOperationResult {
        let operationId = UUID().uuidString
        
        logger.debug("üì§ Starting robust send operation \(operationId)")
        
        // 1. È†êÊ™¢Êü•Á≥ªÁµ±ÁãÄÊÖã
        guard await preflightCheck(operationId: operationId) else {
            return .failure(.systemUnavailable)
        }
        
        // 2. Ê™¢Ê∏¨ÈÇäÁïåÊÉÖÊ≥Å
        let detectedEdgeCases = await edgeCaseDetector.detect(operation: "send", peers: peers, data: data)
        
        // 3. ËôïÁêÜÊ™¢Ê∏¨Âà∞ÁöÑÈÇäÁïåÊÉÖÊ≥Å
        for edgeCase in detectedEdgeCases {
            let handled = await handleEdgeCase(edgeCase)
            if !handled.success {
                logger.warning("‚ö†Ô∏è Failed to handle edge case: \(edgeCase.type)")
            }
        }
        
        // 4. Âü∑Ë°åÂØ¶ÈöõÊìç‰ΩúÔºàÂ∏∂ÈáçË©¶Ê©üÂà∂Ôºâ
        return await executeWithRetry(operationId: operationId) {
            await self.performActualSend(data, to: peers, timeout: timeout)
        }
    }
    
    /// ËôïÁêÜpeerÈÄ£Êé•‰∫ã‰ª∂ÔºàÈÇäÁïåÊÉÖÊ≥ÅÊÑüÁü•Ôºâ
    func handlePeerConnection(_ peerID: MCPeerID) async {
        logger.info("ü§ù Handling peer connection for \(peerID.displayName)")
        
        // Ê™¢Ê∏¨ÂêåÊôÇÈÄ£Êé•Á´∂ÊÖãÊ¢ù‰ª∂
        let context = EdgeCaseContext(
            type: .simultaneousConnection,
            peerID: peerID,
            operation: "connect",
            attemptCount: 1,
            errorHistory: [],
            systemState: await getSystemState(),
            timestamp: Date()
        )
        
        let edgeCase = await edgeCaseDetector.analyzeContext(context)
        if let edgeCase = edgeCase {
            await handleEdgeCase(edgeCase)
        }
        
        // Êõ¥Êñ∞ÈÄöÈÅìÊ±†
        await channelPoolManager.handlePeerConnected(peerID)
        
        // Êõ¥Êñ∞Á∂≤Ë∑ØÂÅ•Â∫∑Â∫¶
        await updateNetworkHealth()
    }
    
    /// ËôïÁêÜpeerÊñ∑Èñã‰∫ã‰ª∂ÔºàÈÇäÁïåÊÉÖÊ≥ÅÊÑüÁü•Ôºâ
    func handlePeerDisconnection(_ peerID: MCPeerID) async {
        logger.info("üëã Handling peer disconnection for \(peerID.displayName)")
        
        // Ê™¢Ê∏¨Âø´ÈÄüÊñ∑ÈñãÈáçÈÄ£Ê®°Âºè
        let context = EdgeCaseContext(
            type: .rapidDisconnection,
            peerID: peerID,
            operation: "disconnect",
            attemptCount: 1,
            errorHistory: [],
            systemState: await getSystemState(),
            timestamp: Date()
        )
        
        let edgeCase = await edgeCaseDetector.analyzeContext(context)
        if let edgeCase = edgeCase {
            await handleEdgeCase(edgeCase)
        }
        
        // Êõ¥Êñ∞ÈÄöÈÅìÊ±†
        await channelPoolManager.handlePeerDisconnected(peerID)
        
        // Ê∏ÖÁêÜÁõ∏ÈóúÊÅ¢Âæ©Êìç‰Ωú
        cleanupRecoveryOperations(for: peerID)
        
        // Êõ¥Êñ∞Á∂≤Ë∑ØÂÅ•Â∫∑Â∫¶
        await updateNetworkHealth()
    }
    
    /// ËôïÁêÜËÉåÊôØ/ÂâçÊôØËΩâÊèõ
    func handleAppStateTransition(to state: AppState) async {
        logger.info("üì± Handling app state transition to \(state)")
        
        let context = EdgeCaseContext(
            type: .backgroundTransition,
            peerID: nil,
            operation: "app_state_transition",
            attemptCount: 1,
            errorHistory: [],
            systemState: await getSystemState(),
            timestamp: Date()
        )
        
        let edgeCase = await edgeCaseDetector.analyzeContext(context)
        if let edgeCase = edgeCase {
            await handleEdgeCase(edgeCase)
        }
        
        // Ë™øÊï¥Êìç‰ΩúÁ≠ñÁï•
        adjustStrategyForAppState(state)
    }
    
    /// Áç≤ÂèñÁ∂≤Ë∑ØÂÅ•Â∫∑Â†±Âëä
    func getNetworkHealthReport() -> NetworkHealthReport {
        return NetworkHealthReport(
            overallHealth: networkHealth,
            edgeCaseStatistics: edgeCaseStats,
            activeRecoveries: activeRecoveries.count,
            circuitBreakerState: circuitBreaker.state,
            recommendations: generateHealthRecommendations()
        )
    }
    
    // MARK: - ÁßÅÊúâÊñπÊ≥ï
    
    private func setupOperationQueue() {
        operationQueue.maxConcurrentOperationCount = Configuration.maxConcurrentOperations
        operationQueue.qualityOfService = .userInitiated
    }
    
    private func registerEdgeCaseHandlers() {
        edgeCaseHandlers = [
            SimultaneousConnectionHandler(),
            RapidDisconnectionHandler(),
            BackgroundTransitionHandler(),
            MemoryPressureHandler(),
            ChannelContentionHandler(),
            NetworkInstabilityHandler(),
            ConcurrentOperationHandler(),
            ResourceExhaustionHandler()
        ].sorted { $0.priority > $1.priority }
        
        logger.debug("üìù Registered \(edgeCaseHandlers.count) edge case handlers")
    }
    
    private func startMonitoring() {
        // ÂïüÂãïÁ∂≤Ë∑ØÂÅ•Â∫∑Áõ£Êéß
        Task {
            while !Task.isCancelled {
                await updateNetworkHealth()
                await collectMetrics()
                try? await Task.sleep(nanoseconds: 30_000_000_000) // 30Áßí
            }
        }
    }
    
    private func preflightCheck(operationId: String) async -> Bool {
        // Ê™¢Êü•ÁÜîÊñ∑Âô®ÁãÄÊÖã
        guard circuitBreaker.canExecute() else {
            logger.warning("‚ö†Ô∏è Circuit breaker is open, blocking operation \(operationId)")
            return false
        }
        
        // Ê™¢Êü•Á≥ªÁµ±Ë≥áÊ∫ê
        let memoryPressure = await checkMemoryPressure()
        if memoryPressure > 0.8 {
            logger.warning("‚ö†Ô∏è High memory pressure, may affect operation \(operationId)")
        }
        
        // Ê™¢Êü•‰ΩµÁôºÊìç‰ΩúÊï∏
        if operationQueue.operationCount >= Configuration.maxConcurrentOperations {
            logger.warning("‚ö†Ô∏è Too many concurrent operations, may queue operation \(operationId)")
        }
        
        return true
    }
    
    private func executeWithRetry<T>(
        operationId: String,
        maxRetries: Int = 3,
        operation: @escaping () async -> T
    ) async -> T {
        var lastResult: T!
        var attempt = 0
        
        while attempt <= maxRetries {
            do {
                lastResult = await operation()
                
                // Êìç‰ΩúÊàêÂäüÔºåÈÄöÁü•ÁÜîÊñ∑Âô®
                circuitBreaker.recordSuccess()
                
                logger.debug("‚úÖ Operation \(operationId) succeeded on attempt \(attempt + 1)")
                break
                
            } catch {
                attempt += 1
                
                // Ë®òÈåÑÂ§±Êïó
                circuitBreaker.recordFailure()
                
                logger.warning("‚ùå Operation \(operationId) failed on attempt \(attempt): \(error)")
                
                if attempt <= maxRetries {
                    // Ë®àÁÆóÈÄÄÈÅøÂª∂ÈÅ≤
                    let delay = calculateBackoffDelay(attempt: attempt)
                    try? await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))
                }
            }
        }
        
        return lastResult
    }
    
    private func performActualSend(_ data: Data, to peers: [MCPeerID], timeout: TimeInterval) async -> NetworkOperationResult {
        let startTime = Date()
        var results: [MCPeerID: Result<Void, Error>] = [:]
        var successfulSends = 0
        var errors: [String: Error] = [:]
        
        // ‰∏¶Ë°åÁôºÈÄÅÂà∞ÊâÄÊúâpeers
        await withTaskGroup(of: (MCPeerID, Result<Void, Error>).self) { group in
            for peer in peers {
                group.addTask { [weak self] in
                    do {
                        // ÂòóË©¶Áç≤ÂèñÈÄöÈÅì
                        guard let channel = await self?.channelPoolManager.acquireChannel(for: peer) else {
                            throw NetworkError.channelUnavailable
                        }
                        
                        // Âü∑Ë°åÁôºÈÄÅ
                        try await self?.networkService.send(data, to: [peer])
                        
                        // Ë®òÈåÑÊàêÂäü‰∏¶ÈáãÊîæÈÄöÈÅì
                        let latency = Date().timeIntervalSince(startTime)
                        await self?.channelPoolManager.releaseChannel(channel, success: true, latency: latency, dataSize: data.count)
                        
                        return (peer, .success(()))
                        
                    } catch {
                        return (peer, .failure(error))
                    }
                }
            }
            
            for await (peer, result) in group {
                results[peer] = result
                
                switch result {
                case .success:
                    successfulSends += 1
                case .failure(let error):
                    errors[peer.displayName] = error
                }
            }
        }
        
        // ÂàÜÊûêÁµêÊûú
        if successfulSends == peers.count {
            return .success(nil)
        } else if successfulSends > 0 {
            return .partialSuccess(nil, errors)
        } else {
            return .failure(.sendFailed)
        }
    }
    
    private func handleEdgeCase(_ context: EdgeCaseContext) async -> EdgeCaseResult {
        // Â∞ãÊâæÂêàÈÅ©ÁöÑËôïÁêÜÂô®
        for handler in edgeCaseHandlers {
            if handler.canHandle(context.type) {
                let result = await handler.handle(context)
                
                // Êõ¥Êñ∞Áµ±Ë®à
                edgeCaseStats[context.type, default: 0] += 1
                
                logger.info("üîß Handled edge case \(context.type) with result: \(result.success)")
                
                return result
            }
        }
        
        // Ê≤íÊúâÊâæÂà∞ÂêàÈÅ©ÁöÑËôïÁêÜÂô®
        logger.warning("‚ö†Ô∏è No handler found for edge case: \(context.type)")
        return EdgeCaseResult(success: false, recoveryAction: .none, delay: nil, message: "No handler available")
    }
    
    private func getSystemState() async -> [String: Any] {
        return [
            "memoryPressure": await checkMemoryPressure(),
            "activeOperations": operationQueue.operationCount,
            "networkHealth": networkHealth.rawValue,
            "connectedPeers": networkService.connectedPeers.count,
            "timestamp": Date().timeIntervalSince1970
        ]
    }
    
    private func checkMemoryPressure() async -> Double {
        var info = mach_task_basic_info()
        var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size)/4
        
        let result = withUnsafeMutablePointer(to: &info) {
            $0.withMemoryRebound(to: integer_t.self, capacity: 1) {
                task_info(mach_task_self_, task_flavor_t(MACH_TASK_BASIC_INFO), $0, &count)
            }
        }
        
        if result == KERN_SUCCESS {
            let memoryMB = Double(info.resident_size) / 1024 / 1024
            return min(1.0, memoryMB / 512.0) // ÂÅáË®≠512MBÁÇ∫È´òÂ£ìÂäõÁ∑ö
        }
        
        return 0.0
    }
    
    private func updateNetworkHealth() async {
        let connectedPeers = networkService.connectedPeers.count
        let poolReport = channelPoolManager.getDetailedReport()
        let memoryPressure = await checkMemoryPressure()
        
        // Á∂úÂêàË©ï‰º∞Á∂≤Ë∑ØÂÅ•Â∫∑Â∫¶
        if connectedPeers == 0 {
            networkHealth = .offline
        } else if poolReport.averageQuality > 0.8 && poolReport.failedChannels == 0 && memoryPressure < 0.6 {
            networkHealth = .excellent
        } else if poolReport.averageQuality > 0.6 && poolReport.failedChannels < 3 && memoryPressure < 0.8 {
            networkHealth = .good
        } else if poolReport.averageQuality > 0.4 && poolReport.failedChannels < 5 {
            networkHealth = .fair
        } else {
            networkHealth = .poor
        }
        
        logger.debug("üíä Network health updated to: \(networkHealth)")
    }
    
    private func collectMetrics() async {
        let metrics = NetworkMetrics(
            timestamp: Date(),
            connectedPeers: networkService.connectedPeers.count,
            activeOperations: operationQueue.operationCount,
            edgeCaseCount: edgeCaseStats.values.reduce(0, +),
            memoryPressure: await checkMemoryPressure(),
            networkHealth: networkHealth
        )
        
        metricsCollector.record(metrics)
    }
    
    private func adjustStrategyForAppState(_ state: AppState) {
        switch state {
        case .background:
            operationQueue.maxConcurrentOperationCount = max(1, Configuration.maxConcurrentOperations / 3)
        case .foreground:
            operationQueue.maxConcurrentOperationCount = Configuration.maxConcurrentOperations
        }
    }
    
    private func cleanupRecoveryOperations(for peerID: MCPeerID) {
        stateLock.lock()
        defer { stateLock.unlock() }
        
        let keysToRemove = activeRecoveries.keys.filter { key in
            activeRecoveries[key]?.peerID == peerID
        }
        
        for key in keysToRemove {
            activeRecoveries.removeValue(forKey: key)
        }
    }
    
    private func calculateBackoffDelay(attempt: Int) -> TimeInterval {
        let baseDelay = 0.5
        let maxDelay = 10.0
        return min(maxDelay, baseDelay * pow(2.0, Double(attempt - 1)))
    }
    
    private func generateHealthRecommendations() -> [String] {
        var recommendations: [String] = []
        
        if networkHealth == .poor {
            recommendations.append("Á∂≤Ë∑ØÂìÅË≥™Â∑ÆÔºåÂª∫Ë≠∞Ê™¢Êü•ÈÄ£Êé•")
        }
        
        if edgeCaseStats.values.reduce(0, +) > 50 {
            recommendations.append("ÈÇäÁïåÊÉÖÊ≥ÅÈ†ªÁπÅÔºåÂª∫Ë≠∞Ë™øÊï¥ÈÖçÁΩÆ")
        }
        
        if activeRecoveries.count > 5 {
            recommendations.append("ÈÅéÂ§öÊÅ¢Âæ©Êìç‰ΩúÔºåÂª∫Ë≠∞ÈáçÂïüÁ∂≤Ë∑ØÂ±§")
        }
        
        return recommendations
    }
}

// MARK: - ÊîØÊåÅÈ°ûÂûã

enum NetworkHealth: String {
    case unknown = "unknown"
    case offline = "offline"
    case poor = "poor"
    case fair = "fair"
    case good = "good"
    case excellent = "excellent"
}

enum AppState {
    case foreground
    case background
}

struct NetworkHealthReport {
    let overallHealth: NetworkHealth
    let edgeCaseStatistics: [EdgeCaseType: Int]
    let activeRecoveries: Int
    let circuitBreakerState: CircuitBreakerState
    let recommendations: [String]
}

struct RecoveryOperation {
    let id: String
    let peerID: MCPeerID?
    let type: EdgeCaseType
    let startTime: Date
    let timeout: TimeInterval
}

struct NetworkMetrics {
    let timestamp: Date
    let connectedPeers: Int
    let activeOperations: Int
    let edgeCaseCount: Int
    let memoryPressure: Double
    let networkHealth: NetworkHealth
}

extension NetworkError {
    static let systemUnavailable = NetworkError.sessionError("System unavailable")
    static let channelUnavailable = NetworkError.sessionError("Channel unavailable")
}

// MARK: - ÈÇäÁïåÊÉÖÊ≥ÅÊ™¢Ê∏¨Âô®

class EdgeCaseDetector {
    private var connectionHistory: [MCPeerID: [Date]] = [:]
    private var disconnectionHistory: [MCPeerID: [Date]] = [:]
    private var operationHistory: [String: [Date]] = [:]
    
    func detect(operation: String, peers: [MCPeerID], data: Data) async -> [EdgeCaseContext] {
        var detectedCases: [EdgeCaseContext] = []
        
        // Ê™¢Ê∏¨‰ΩµÁôºÊìç‰ΩúÈÅéÂ§ö
        if await checkConcurrentOperations() {
            detectedCases.append(createContext(.concurrentOperations, operation: operation))
        }
        
        // Ê™¢Ê∏¨ÈÄöÈÅìÁ´∂Áà≠
        if await checkChannelContention(peers: peers) {
            detectedCases.append(createContext(.channelContention, operation: operation))
        }
        
        // Ê™¢Ê∏¨Ë≥áÊ∫êËÄóÁõ°
        if await checkResourceExhaustion() {
            detectedCases.append(createContext(.resourceExhaustion, operation: operation))
        }
        
        return detectedCases
    }
    
    func analyzeContext(_ context: EdgeCaseContext) async -> EdgeCaseContext? {
        // ÂàÜÊûê‰∏ä‰∏ãÊñáÊòØÂê¶Á¢∫ÂØ¶ÊßãÊàêÈÇäÁïåÊÉÖÊ≥Å
        switch context.type {
        case .simultaneousConnection:
            return await analyzeSimilarConnections(context)
        case .rapidDisconnection:
            return await analyzeRapidDisconnections(context)
        default:
            return context
        }
    }
    
    private func checkConcurrentOperations() async -> Bool {
        // ÂØ¶ÈöõÊ™¢Ê∏¨ÈÇèËºØ
        return false // Á∞°ÂåñÂØ¶Áèæ
    }
    
    private func checkChannelContention(peers: [MCPeerID]) async -> Bool {
        // ÂØ¶ÈöõÊ™¢Ê∏¨ÈÇèËºØ
        return false // Á∞°ÂåñÂØ¶Áèæ
    }
    
    private func checkResourceExhaustion() async -> Bool {
        // ÂØ¶ÈöõÊ™¢Ê∏¨ÈÇèËºØ
        return false // Á∞°ÂåñÂØ¶Áèæ
    }
    
    private func analyzeSimilarConnections(_ context: EdgeCaseContext) async -> EdgeCaseContext? {
        // ÂàÜÊûêÊòØÂê¶Â≠òÂú®ÂêåÊôÇÈÄ£Êé•ÂïèÈ°å
        return context // Á∞°ÂåñÂØ¶Áèæ
    }
    
    private func analyzeRapidDisconnections(_ context: EdgeCaseContext) async -> EdgeCaseContext? {
        // ÂàÜÊûêÊòØÂê¶Â≠òÂú®Âø´ÈÄüÊñ∑ÈñãÈáçÈÄ£ÂïèÈ°å
        return context // Á∞°ÂåñÂØ¶Áèæ
    }
    
    private func createContext(_ type: EdgeCaseType, operation: String, peerID: MCPeerID? = nil) -> EdgeCaseContext {
        return EdgeCaseContext(
            type: type,
            peerID: peerID,
            operation: operation,
            attemptCount: 1,
            errorHistory: [],
            systemState: [:],
            timestamp: Date()
        )
    }
}

// MARK: - ÁÜîÊñ∑Âô®

enum CircuitBreakerState: String {
    case closed = "closed"
    case open = "open"
    case halfOpen = "half_open"
}

class CircuitBreaker {
    private(set) var state: CircuitBreakerState = .closed
    private var failureCount = 0
    private var successCount = 0
    private var lastFailureTime: Date?
    
    private let failureThreshold = 5
    private let recoveryTimeout: TimeInterval = 60.0
    private let successThreshold = 3
    
    func canExecute() -> Bool {
        switch state {
        case .closed:
            return true
        case .open:
            return shouldAttemptReset()
        case .halfOpen:
            return true
        }
    }
    
    func recordSuccess() {
        switch state {
        case .closed:
            failureCount = 0
        case .halfOpen:
            successCount += 1
            if successCount >= successThreshold {
                state = .closed
                failureCount = 0
                successCount = 0
            }
        case .open:
            break
        }
    }
    
    func recordFailure() {
        failureCount += 1
        lastFailureTime = Date()
        
        switch state {
        case .closed:
            if failureCount >= failureThreshold {
                state = .open
            }
        case .halfOpen:
            state = .open
            successCount = 0
        case .open:
            break
        }
    }
    
    private func shouldAttemptReset() -> Bool {
        guard let lastFailure = lastFailureTime else { return false }
        
        if Date().timeIntervalSince(lastFailure) >= recoveryTimeout {
            state = .halfOpen
            successCount = 0
            return true
        }
        
        return false
    }
}

// MARK: - Á∂≤Ë∑ØÊåáÊ®ôÊî∂ÈõÜÂô®

class NetworkMetricsCollector {
    private var metrics: [NetworkMetrics] = []
    private let maxMetrics = 1000
    
    func record(_ metric: NetworkMetrics) {
        metrics.append(metric)
        
        if metrics.count > maxMetrics {
            metrics.removeFirst(metrics.count - maxMetrics)
        }
    }
    
    func getRecentMetrics(count: Int = 100) -> [NetworkMetrics] {
        return Array(metrics.suffix(count))
    }
    
    func calculateAverageHealth(over duration: TimeInterval) -> NetworkHealth {
        let cutoffTime = Date().addingTimeInterval(-duration)
        let recentMetrics = metrics.filter { $0.timestamp > cutoffTime }
        
        guard !recentMetrics.isEmpty else { return .unknown }
        
        // Á∞°ÂåñÁöÑÂÅ•Â∫∑Â∫¶Ë®àÁÆó
        let healthScores = recentMetrics.map { metric -> Double in
            switch metric.networkHealth {
            case .excellent: return 1.0
            case .good: return 0.8
            case .fair: return 0.6
            case .poor: return 0.4
            case .offline: return 0.0
            case .unknown: return 0.5
            }
        }
        
        let averageScore = healthScores.reduce(0, +) / Double(healthScores.count)
        
        switch averageScore {
        case 0.9...1.0: return .excellent
        case 0.7..<0.9: return .good
        case 0.5..<0.7: return .fair
        case 0.2..<0.5: return .poor
        case 0.0..<0.2: return .offline
        default: return .unknown
        }
    }
}