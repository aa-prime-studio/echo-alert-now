#!/usr/bin/env swift

import Foundation

print("üîç Ê∏¨Ë©¶4: Â§ßË¶èÊ®°ÂÖßÂÆπÊ™¢Ê∏¨Ê∏¨Ë©¶")
print("üìä ÁõÆÊ®ô: 2,000,000Ê™¢Ê∏¨/Áßí")
print("")

// ÂÖßÂÆπÊ™¢Ê∏¨Á≥ªÁµ±
struct ContentDetector {
    
    // Èá£È≠öÈóúÈçµË©ûË©ûÂ∫´
    static let phishingKeywords = [
        "ÈªûÊìäÈÄ£Áµê", "Ëº∏ÂÖ•ÂØÜÁ¢º", "È©óË≠âÂ∏≥Ëôü", "Á∑äÊÄ•ËôïÁêÜ", "Á´ãÂç≥Á¢∫Ë™ç",
        "Â∏≥Êà∂Áï∞Â∏∏", "ÂÆâÂÖ®È©óË≠â", "ÈªûÊìäÊ≠§Ëôï", "Ë∫´‰ªΩÈ©óË≠â", "Á∑äÊÄ•ÈÄöÁü•"
    ]
    
    enum ThreatLevel: Int {
        case normal = 0, low = 1, medium = 2, high = 3, critical = 4
    }
    
    enum ContentType {
        case normal, phishing, bot
    }
    
    static func detectContent(_ content: String) -> (type: ContentType, threat: ThreatLevel, confidence: Double) {
        
        // Á¨¨‰∏ÄÂ±§: ÈóúÈçµË©ûÊ™¢Ê∏¨
        var phishingScore = 0.0
        for keyword in phishingKeywords {
            if content.contains(keyword) {
                phishingScore += 0.3
            }
        }
        
        if phishingScore > 0.9 {
            return (.phishing, .critical, 0.95)
        } else if phishingScore > 0.6 {
            return (.phishing, .high, 0.8)
        } else if phishingScore > 0.3 {
            return (.phishing, .medium, 0.6)
        }
        
        // Á¨¨‰∫åÂ±§: BotÊ™¢Ê∏¨
        let uniqueChars = Set(content).count
        let totalChars = content.count
        let specialCharCount = content.filter { "!@#$%^&*()".contains($0) }.count
        let uppercaseCount = content.filter { $0.isUppercase }.count
        
        let uniqueRatio = Double(uniqueChars) / Double(max(totalChars, 1))
        let specialRatio = Double(specialCharCount) / Double(max(totalChars, 1))
        let uppercaseRatio = Double(uppercaseCount) / Double(max(totalChars, 1))
        
        if uniqueRatio < 0.3 || specialRatio > 0.7 || uppercaseRatio > 0.8 {
            if uniqueRatio < 0.1 && specialRatio > 0.8 {
                return (.bot, .critical, 0.9)
            } else if uniqueRatio < 0.2 && specialRatio > 0.5 {
                return (.bot, .high, 0.75)
            } else {
                return (.bot, .medium, 0.6)
            }
        }
        
        return (.normal, .normal, 0.1)
    }
}

// ÁîüÊàêÊ∏¨Ë©¶ÂÖßÂÆπ
func generateTestContent() -> String {
    let contentTypes = Int.random(in: 1...10)
    
    if contentTypes <= 3 { // 30% Èá£È≠öÂÖßÂÆπ
        let phishingTemplates = [
            "Á∑äÊÄ•ÈÄöÁü•ÔºöÊÇ®ÁöÑÂ∏≥Êà∂Áï∞Â∏∏ÔºåË´ãÁ´ãÂç≥ÈªûÊìäÈÄ£ÁµêÈÄ≤Ë°åË∫´‰ªΩÈ©óË≠â",
            "ÂÆâÂÖ®Ë≠¶Â†±ÔºöÊ™¢Ê∏¨Âà∞Áï∞Â∏∏ÁôªÂÖ•ÔºåË´ãÈªûÊìäÊ≠§ËôïËº∏ÂÖ•ÂØÜÁ¢ºÁ¢∫Ë™ç",
            "ÈáçË¶ÅÔºöÊÇ®ÁöÑÂ∏≥ËôüÂ∞áË¢´ÂáçÁµêÔºåË´ãÁ∑äÊÄ•ËôïÁêÜ‰∏¶È©óË≠âÂ∏≥Ëôü",
            "Á≥ªÁµ±ÈÄöÁü•ÔºöÁôºÁèæÂèØÁñëÊ¥ªÂãïÔºåË´ãÁ´ãÂç≥Á¢∫Ë™ç‰∏¶Ëº∏ÂÖ•ÂØÜÁ¢º"
        ]
        return phishingTemplates.randomElement()!
    } else if contentTypes <= 5 { // 20% BotÂÖßÂÆπ
        let botPatterns = [
            "!!!AAAA!!!BBBB!!!CCCC!!!",
            "$$$$$$$$$$$$$$$$$$$$$$$$",
            "WWWWWWWWWWWWWWWWWWWWWWWW",
            "#@#@#@#@#@#@#@#@#@#@#@#@"
        ]
        return botPatterns.randomElement()!
    } else { // 50% Ê≠£Â∏∏ÂÖßÂÆπ
        let normalContent = [
            "Â§ßÂÆ∂Â•ΩÔºå‰ªäÂ§©Â§©Ê∞£Âæà‰∏çÈåØ",
            "ÊàëÁèæÂú®Âú®ÂÖ¨ÂúíÊï£Ê≠•ÔºåÂæàËàíÊúç",
            "Ë¨ùË¨ùÂ§ßÂÆ∂ÁöÑÂπ´Âä©ÂíåÊîØÊåÅ",
            "Â∏åÊúõÂ§ßÂÆ∂ÈÉΩÂπ≥ÂÆâÂÅ•Â∫∑"
        ]
        return normalContent.randomElement()!
    }
}

// ÈñãÂßãÂ§ßË¶èÊ®°ÂÖßÂÆπÊ™¢Ê∏¨Ê∏¨Ë©¶
print("üîÑ ÈñãÂßãÂü∑Ë°å6,000,000Ê¨°ÂÖßÂÆπÊ™¢Ê∏¨...")
let startTime = CFAbsoluteTimeGetCurrent()

var totalDetections = 0
var normalCount = 0
var phishingCount = 0
var botCount = 0
var criticalThreats = 0
var highThreats = 0
var mediumThreats = 0
var lowThreats = 0

for batch in 1...60 {
    print("üìä ÊâπÊ¨°\(batch)/60ÈÄ≤Ë°å‰∏≠...")
    
    for _ in 1...100_000 {
        let content = generateTestContent()
        let result = ContentDetector.detectContent(content)
        
        switch result.type {
        case .normal:
            normalCount += 1
        case .phishing:
            phishingCount += 1
        case .bot:
            botCount += 1
        }
        
        switch result.threat {
        case .normal:
            break
        case .low:
            lowThreats += 1
        case .medium:
            mediumThreats += 1
        case .high:
            highThreats += 1
        case .critical:
            criticalThreats += 1
        }
        
        totalDetections += 1
    }
    
    let currentTime = CFAbsoluteTimeGetCurrent()
    let elapsed = currentTime - startTime
    let currentRate = Double(totalDetections) / elapsed
    
    if batch % 10 == 0 {
        print("   ÈÄ≤Â∫¶: \(totalDetections)/6,000,000")
        print("   Ê≠£Â∏∏: \(normalCount), Èá£È≠ö: \(phishingCount), Bot: \(botCount)")
        print("   Â®ÅËÑÖÁ≠âÁ¥ö - ‰Ωé:\(lowThreats) ‰∏≠:\(mediumThreats) È´ò:\(highThreats) Ê•µ:\(criticalThreats)")
        print("   Ê™¢Ê∏¨ÈÄüÂ∫¶: \(Int(currentRate))Ê¨°/Áßí")
        print("")
    }
}

let endTime = CFAbsoluteTimeGetCurrent()
let totalTime = endTime - startTime
let finalRate = Double(totalDetections) / totalTime

let normalPercent = Double(normalCount) / Double(totalDetections) * 100
let phishingPercent = Double(phishingCount) / Double(totalDetections) * 100
let botPercent = Double(botCount) / Double(totalDetections) * 100

print("üìä Ê∏¨Ë©¶4ÊúÄÁµÇÁµêÊûú:")
print("Á∏ΩÊ™¢Ê∏¨Ê¨°Êï∏: \(totalDetections)")
print("Ê≠£Â∏∏ÂÖßÂÆπ: \(normalCount) (\(String(format: "%.1f", normalPercent))%)")
print("Èá£È≠öÂÖßÂÆπ: \(phishingCount) (\(String(format: "%.1f", phishingPercent))%)")
print("BotÂÖßÂÆπ: \(botCount) (\(String(format: "%.1f", botPercent))%)")
print("Â®ÅËÑÖÁµ±Ë®à:")
print("  ‰ΩéÈ¢®Èö™: \(lowThreats)")
print("  ‰∏≠È¢®Èö™: \(mediumThreats)")
print("  È´òÈ¢®Èö™: \(highThreats)")
print("  Ê•µÈ´òÈ¢®Èö™: \(criticalThreats)")
print("ËÄóÊôÇ: \(String(format: "%.2f", totalTime))Áßí")
print("ÈÄüÂ∫¶: \(Int(finalRate))Ê™¢Ê∏¨/Áßí")
print("ÁõÆÊ®ôÈÅîÊàê: \(finalRate > 2_000_000 ? "‚úÖ" : "‚ùå")")